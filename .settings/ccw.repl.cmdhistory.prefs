cmdhistory=["lein run" "(-main )" "(-main)" "(read-file)" "(read-file \\"wurst\\")" "(-main)" "(analyse-java-file \\"hansel\\")" "(def phone-number \\"672-345-456-3212\\")" "(def matcher (re-matcher \#\\"((\\\\d+)-(\\\\d+))\\" phone-number))" "(re-find matcher)" "(def matcher (re-matcher \#\\"/.+?(?\=public class)/\\" \\"wurst\\"))" "(remove-commentars \\"\\")" "(remove-commentars \\"wurst\\")" "(re-find comment-regex \\"wurst\\")" "(slurp \\"/temp/CamundaBpmProcessApplication.java\\")" "(slurp \\"CamundaBpmProcessApplication.java\\")" "\=> (slurp \\"C\:\\\\Users\\\\Kroemel\\\\Documents\\\\GitHub\\\\efp\\\\temp\\\\CamundaBpmProcessApplication.java\\")" "(slurp \\"C\:\\\\Users\\\\Kroemel\\\\Documents\\\\GitHub\\\\efp\\\\temp\\\\CamundaBpmProcessApplication.java\\")" "(slurp \\"C\:\\\\\\\\Users\\\\\\\\Kroemel\\\\\\\\Documents\\\\\\\\GitHub\\\\\\\\efp\\\\\\\\temp\\\\\\\\CamundaBpmProcessApplication.java\\")" "(example-java)" "(str example-java)" "(remove-commentars example-java)" "(remove-commentars (str example-java))" "(str example-java)" "(println \\"hello\\")" "(re-find comment-regex \\"wurst\\")" "(re-find comment-regex (str example-java))" "(str example-java)" "(def comment-regex \#\\"((?\:\\\\\\\\/\\\\\\\\*(?\:[^*]|(?\:\\\\\\\\*+[^*\\\\\\\\/]))*\\\\\\\\*+\\\\\\\\/)|(?\:\\\\\\\\/\\\\\\\\/.*))\\")" "(def comment-regex2 \#\\"((?\:\\\\\\\\/\\\\\\\\*(?\:[^*]|(?\:\\\\\\\\*+[^*\\\\\\\\/]))*\\\\\\\\*+\\\\\\\\/)|(?\:\\\\\\\\/\\\\\\\\/.*))\\")" "(re-find comment-regex2 (str example-java))" "(re-match comment-regex2 (str example-java))" "(def comment-regex3 \#\\"((?\:\\\\\\\\/\\\\\\\\*(?\:[^*]|(?\:\\\\\\\\*+[^*\\\\\\\\/]))*\\\\\\\\*+\\\\\\\\/)|(?\:\\\\\\\\/\\\\\\\\/.*))\\")" "(re-find comment-regex3 (str example-java))" "(def comment-regex4 \#\\"((?\:\\\\/\\\\*(?\:[^*]|(?\:\\\\*+[^*\\\\/]))*\\\\*+\\\\/)|(?\:\\\\/\\\\/.*))\\")" "(re-find comment-regex4 (str example-java))" "(clojure.string/replace javaasstring comment-regex4 \\"\\")" "(clojure.string/replace (str javaasstring) comment-regex4 \\"\\")" "(clojure.string/replace (str example-java) comment-regex4 \\"\\")" "(defn sum\\r\\n  ([vals]\\r\\n     (sum vals 0))\\r\\n  ([vals accumulating-total]\\r\\n     (if (empty? vals)\\r\\n       accumulating-total\\r\\n       (recur (rest vals) (+ (first vals) accumulating-total)))))" "(sum [39 4 1])" "(def commentless-java (remove-comments examplejava))" "(remove-comments examplejava)" "(def commentless-java (remove-comments example-java))" "(remove-comments example-java)" "(example-java)" "(str example-java)" "(def commentless-java (remove-comments (str example-java)))" "(remove-comments (str example-java))" "(str example-java)" "(remove-comments (str example-java))" "(remove-comments \\"rus\\")" "(help remoce-comments)" "(remove-comments)" "(remove-comments \\"whas\\")" "(get-all-matches example-java import-regex)" "(clojure.string/replace example-java comment-regex \\"\\")" "(example-java)" "(str example-java)" "(clojure.string/replace example-java comment-regex \\"\\")" "(get-all-matches example-java import-regex)" "(re-find import-regex example-java)" "(map (re-find import-regex example-java) \:packets)" "(re-find import-regex example-java)" "(\:pather (re-find import-regex example-java))" "(count (re-find import-regex example-java))" "(clojure.pprint/pprint (re-find import-regex example-java))" "    (defn print-map [m]\\r\\n      (for [[x,y] (seq m)] (println (str x \\" \: \\" y))))" "(print-map (re-find import-regex example-java))" "(clojure.pprint/write {\:a 1 \:b 2} \:stream nil)" "(clojure.pprint/write (re-find import-regex example-java) \:stream nil)" "(get (re-find import-regex example-java) 1)" "(get (re-find import-regex example-java) 3)" "(get (re-find import-regex example-java) 10)" "(get (re-find import-regex (remove-comments example-java)) 3)" "(get (re-find import-regex (remove-comments example-java)) 10)" "(re-matcher import-regex example-java)" "(def matcher (re-matcher import-regex example-java))" "(re-find matcher)" "(re-groups matcher)" "(get (re-groups matcher) 1)" "(get-all-matches example-java import-regex)" "(get-all-matches example-java \#\\"import\\")" "(def matcher (re-matcher \#\\"import\\" example-java))" "(re-find matcher)" "(get-all-matches example-java import-regex)" "(get-all-matches example-java \#\\"import\\")" "(defn get-all-matches2\\r\\n  [javastring regex]\\r\\n  (loop [matcher (re-matcher regex javastring) imports []]\\r\\n\\t  (if (re-find matcher)\\r\\n      imports\\r\\n\\t    (recur matcher (conj imports \\"wurst\\")))))" "(get-all-matches2 example-java \#\\"import\\")" "(defn get-all-matches3\\r\\n  [javastring regex]\\r\\n  (loop [matcher (re-matcher regex javastring) imports []]\\r\\n    (if (re-find matcher)\\r\\n      (recur matcher (conj imports \\"wurst\\"))\\r\\n      imports)))" "(get-all-matches2 example-java \#\\"import\\")" "(get-all-matches3 example-java \#\\"import\\")" "(get-all-matches example-java import-regex)" "(get-all-matches example-java brackets-regex)" "(re-find \#\\"\\\\{((?>[^{}]+)|(?R))*\\\\}\\" example-java)" "(re-find \#\\"\\\\{((?>[^{}]+)|(f))*\\\\}\\" example-java)" "(re-find \#\\"\\\\{((?>[^{}]+)|(?R))*\\\\}\\" example-java)" "(get-all-matches example-java import-regex)" "(defn re-pos [re s]\\r\\n  (let [re (js/RegExp. (.-source re) \\"g\\")]\\r\\n    (loop [res {}]\\r\\n      (if-let [m (.exec re s)]\\r\\n        (recur (assoc res (.-index m) (first m)))\\r\\n        res))))" "(clojure.string.index-of \\"w\\" \\"wurst\\")" "(clojure.string/index-of \\"w\\" \\"wurst\\")" "(clojure.string/index-of \\"wurst\\" \\"w\\")" "(defn split-java-file\\r\\n  [javastring]\\r\\n  (if-let [class-pos (clojure.string/index-of javastring \\"public class\\")]\\r\\n    class-pos))" "(split-java-file example-java)" "(defn split-java-file2\\r\\n  [javastring]\\r\\n  (if-let [class-pos (clojure.string/index-of javastring \\"public class\\")]\\r\\n    (subs javastring class-pos)))" "(split-java-file2 example-java)" "(defn split-java-file3\\r\\n  [javastring]\\r\\n  (if-let [class-pos (clojure.string/index-of javastring \\"public class\\")] class-pos)\\r\\n  (class-pos))" "(defn split-java-file4\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (class-pos))" "(defn split-java-file7\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {imports\: (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (splitted-java-file))" "(defn split-java-file9\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (splitted-java-file))" "(split-java-file9 example-java)" "(get-all-matches (subs example-java 0 800) import-regex)" "(def splitted-java-file {\:imports [1,2,3]})" "(\:imports splitted-java-file)" "(defn split-java-filea\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (print class-pos)\\r\\n  (print (subs javastring 0 class-pos))\\r\\n  (print (get-all-matches (subs javastring 0 class-pos) import-regex))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (splitted-java-file))" "(split-java-filea example-java)" "(defn split-java-fileb\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (println class-pos)\\r\\n  (println (subs javastring 0 class-pos))\\r\\n  (println (get-all-matches (subs javastring 0 class-pos) import-regex))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)}))" "(split-java-fileb example-java)" "(\:imports (split-java-filea example-java))" "(def wurst {\:imports 3})" "(into wurst {\:hamster 6})" "(defn split-java-filev\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let split-from-class (subs javastring class-pos)\\r\\n    (let split-class-line (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))\\r\\n      (into splitted-java-file {\:class-name (re-find split-class-line \#\\"(?<\=public class )\\\\w+\\")})\\r\\n      (into splitted-java-file {\:extends (re-find split-class-line \#\\"(?<\=extends )\\\\w+\\")})\\r\\n      (into splitted-java-file {\:implements (re-find split-class-line \#\\"(?<\=implements )\\\\w+\\")}))\\r\\n    )\\r\\n  )" "(defn split-java-filev\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos)]\\r\\n    (let [split-class-line (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n      (into splitted-java-file {\:class-name (re-find split-class-line \#\\"(?<\=public class )\\\\w+\\")})\\r\\n      (into splitted-java-file {\:extends (re-find split-class-line \#\\"(?<\=extends )\\\\w+\\")})\\r\\n      (into splitted-java-file {\:implements (re-find split-class-line \#\\"(?<\=implements )\\\\w+\\")}))\\r\\n    )\\r\\n  )" "(split-java-file java-example)" "(split-java-filev example-java)" "(analyse-java-file \\"\\")" "(defn fill-stupid\\r\\n  [var1 var2]\\r\\n  (println var1))" "(map fill-stupid [\\"Hamster\\" \\"wurst\\"])" "(map fill-stupid [\\"Hamster\\" \\"wurst\\"] [\\"stumpf\\" \\"sdum\\"])" "(map (fn [var1 var2] (println var2)) [\\"Hamster\\" \\"wurst\\"] [\\"stumpf\\" \\"sdum\\"])" "(map (fn [identifier regex-part] ({identifier regex-part})) [\\"Hamster\\" \\"wurst\\"] [\\"stumpf\\" \\"sdum\\"])" "(map (fn [identifier regex-part] ({identifier regex-part})) [\:wurst \:hansel] [\\"stumpf\\" \\"sdum\\"])" "(map (fn [var] (println var)) {\:hansel \: \\"wurst\\"})" "(map (fn [var] (println var)) [{\:hansel \: \\"wurst\\"}])" "(map (fn [var] (println var)) [{\:hansel \\"wurst\\"}])" "(map (fn [var] (println var)) [{\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"}])" "(map (fn [var] ({var})) [{\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"}])" "(reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\w+\\")) \\"public class CamundaBpmProcessApplication extends ServletProcessApplication {\\")))\\r\\n           {}\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})" "{\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"}" "(re-find (re-pattern (str \\"(?<\=\\" \\" extends\\" \\")\\\\w+\\")) \\"public class CamundaBpmProcessApplication extends ServletProcessApplication {\\")" "(str \\"(?<\=\\" \\" extends\\" \\")\\\\w+\\")" "(str \\"(?<\=\\" \\" extends\\" \\")\\\\\\\\w+\\")" "(reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) \\"public class CamundaBpmProcessApplication extends ServletProcessApplication {\\")))\\r\\n           {}\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})" "(analyse-java-file example-java)" "(defn split-java-file1\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos) split-class-line (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n    (println (reduce (fn [new-map [key val]]\\r\\n                       (assoc splitted-java-file key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) split-class-line)))\\r\\n                    {}\\r\\n                    {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"}))\\r\\n    )\\r\\n  )" "(split-java-file1 example-java)" "(defn split-java-file2\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos) split-class-line (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n    (println (reduce (fn [new-map [key val]]\\r\\n                       (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) split-class-line)))\\r\\n                    splitted-java-file\\r\\n                    {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"}))\\r\\n    )\\r\\n  )" "(split-java-file2 example-java)" "(defn split-java-file3\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos) split-class-line (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n    (reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) split-class-line)))\\r\\n           splitted-java-file\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})\\r\\n    )\\r\\n  )" "(split-java-file3 example-java)" "(reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (println (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")))))\\r\\n           splitted-java-file\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})" "(defn split-java-file4\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos) split-class-line (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n    (println split-class-line)\\r\\n    (reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) split-class-line)))\\r\\n           splitted-java-file\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})\\r\\n    )\\r\\n  )" "(split-java-file4 example-java)" "(defn split-java-file5\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos) split-class-line (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n    (println split-from-class)\\r\\n    (println (subs split-from-class (clojure.string/index-of split-from-class \\"{\\")))\\r\\n    (reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) split-class-line)))\\r\\n           splitted-java-file\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})\\r\\n    )\\r\\n  )" "(split-java-file5 example-java)" "(defn split-java-file6\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos) split-class-line 0 (subs split-from-class (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n    (println split-class-line)\\r\\n    (println (subs split-from-class 0 (clojure.string/index-of split-from-class \\"{\\")))\\r\\n    (reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) split-class-line)))\\r\\n           splitted-java-file\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})\\r\\n    )\\r\\n  )" "(defn split-java-file6\\r\\n  [javastring]\\r\\n  (def class-pos (clojure.string/index-of javastring \\"public class\\"))\\r\\n  (def splitted-java-file {\:imports (get-all-matches (subs javastring 0 class-pos) import-regex)})\\r\\n  (let [split-from-class (subs javastring class-pos) split-class-line (subs split-from-class 0 (clojure.string/index-of split-from-class \\"{\\"))]\\r\\n    (println split-class-line)\\r\\n    (println (subs split-from-class 0 (clojure.string/index-of split-from-class \\"{\\")))\\r\\n    (reduce (fn [new-map [key val]]\\r\\n              (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) split-class-line)))\\r\\n           splitted-java-file\\r\\n           {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})\\r\\n    )\\r\\n  )\\n(split-java-file6 example-java)" "(analyse-java-file example-java)" "(analyse-java-file \\"\\")" "(assoc splitted-java-file \:imports (get-all-matches split-to-class import-regex))" "(analyse-java-file \\"\\")" "(map {\:hans 2} {\:peter 4})" "(into  {\:hans 2} {\:peter 4})" "(analyse-java-file \\"\\")" "(reduce (fn [new-map [key val]]\\r\\n\\t               (assoc new-map key (re-find (re-pattern (str \\"(?<\=\\" val \\")\\\\\\\\w+\\")) \\"public class CamundaBpmProcessApplication extends ServletProcessApplication {\\")))\\r\\n\\t             {}\\r\\n\\t             {\:class-name \\"public class \\" \:extends \\"extends \\" \:implements \\"implements \\"})" "(assoc {} \:imports (get-all-matches \\"package example.camunda.bpm.camunda_bpm_ejb_project;\\r\\n\\r\\nimport java.util.HashMap;\\r\\nimport java.util.Map;\\r\\n\\r\\nimport org.camunda.bpm.application.PostDeploy;\\r\\nimport org.camunda.bpm.application.ProcessApplication;\\r\\nimport org.camunda.bpm.application.impl.ServletProcessApplication;\\r\\nimport org.camunda.bpm.engine.ProcessEngine;\\r\\n\\r\\n/**\\r\\n * Process Application exposing this application's resources the process engine. \\r\\n */\\r\\n@ProcessApplication\\" import-regex))" "(into {} {\:class-name\\r\\n \\"CamundaBpmProcessApplication\\",\\r\\n \:extends \\"ServletProcessApplication\\",\\r\\n \:implements nil} {\:imports\\r\\n [\\"java.util.HashMap\\"\\r\\n  \\"java.util.Map\\"\\r\\n  \\"org.camunda.bpm.application.PostDeploy\\"\\r\\n  \\"org.camunda.bpm.application.ProcessApplication\\"\\r\\n  \\"org.camunda.bpm.application.impl.ServletProcessApplication\\"\\r\\n  \\"org.camunda.bpm.engine.ProcessEngine\\"]})" "(into {\:class-name\\r\\n    \\"CamundaBpmProcessApplication\\",\\r\\n    \:extends \\"ServletProcessApplication\\",\\r\\n    \:implements nil} {\:imports\\r\\n    [\\"java.util.HashMap\\"\\r\\n     \\"java.util.Map\\"\\r\\n     \\"org.camunda.bpm.application.PostDeploy\\"\\r\\n     \\"org.camunda.bpm.application.ProcessApplication\\"\\r\\n     \\"org.camunda.bpm.application.impl.ServletProcessApplication\\"\\r\\n     \\"org.camunda.bpm.engine.ProcessEngine\\"]})" "(analyse-java-file \\"\\")"]
eclipse.preferences.version=1
